### Variables
@baseUrl = http://localhost:3000
@contentType = application/json
@userId = 67d57a523fa3b977604aac0e
@jwtToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2Q1N2E1MjNmYTNiOTc3NjA0YWFjMGUiLCJpYXQiOjE3NDIwNDkwODIsImV4cCI6MTc0MjA1MjY4Mn0.gh82wW4QGPamCnvMoD-wo-HPTCPgbXvB4fmyqA4LBlw
@refreshToken = 8cd890e348485a400d7168db60b640864d9c160cb26c606536c42caa2762e9b1c92bdb9568e2e3d2

### ==========================================
### BASIC API TESTS
### ==========================================

### Test root endpoint
# @name root
GET {{baseUrl}}/
Content-Type: {{contentType}}

### ==========================================
### AUTHENTICATION
### ==========================================

### Sign up a new user
# @name signup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
    "name": "Test User",
    "email": "testuser@example.com",
    "password": "securePassword123"
}

### Login to get JWT token
# @name login
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
    "email": "testuser@example.com",
    "password": "securePassword123"
}

### Refresh access token using refresh token
# @name refreshJWTToken
POST {{baseUrl}}/auth/refresh-token
Content-Type: {{contentType}}

{
    "refreshToken": "{{refreshToken}}"
}

### ==========================================
### USER MANAGEMENT
### ==========================================

### Get user by ID
# @name getUser
GET {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Update user by ID
# @name updateUser
PUT {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "name": "Updated Name",
    "email": "updated@example.com"
}

### Test invalid user ID (should return 404)
# @name getUserNotFound
GET {{baseUrl}}/users/123456789012345678901234
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### USER DATA MANAGEMENT
### ==========================================

### Create volunteered data
# @name createVolunteeredData
POST {{baseUrl}}/volunteered-data
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "type": "personal_info",
    "value": {
        "age": 30,
        "occupation": "Software Engineer"
    }
}

### Create behavioral data
# @name createBehavioralData
POST {{baseUrl}}/behavioral-data
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "action": "page_view",
    "context": {
        "page": "/dashboard",
        "timestamp": "2024-03-01T12:00:00Z",
        "device": "desktop"
    }
}

### Create external data
# @name createExternalData
POST {{baseUrl}}/external-data
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "source": "github",
    "data": {
        "repos": 25,
        "followers": 150,
        "languages": ["TypeScript", "Python", "Go"]
    }
}

### Get all user data (includes volunteered, behavioral, and external data)
# @name getUserData
GET {{baseUrl}}/user-data/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### DATA SOURCE INTEGRATION
### ==========================================

### Store data source credentials
# @name storeCredentials
POST {{baseUrl}}/user-data-sources
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "dataSourceType": "gmail",
    "credentials": {
        "accessToken": "ya29.example-access-token",
        "refreshToken": "1//example-refresh-token",
        "expiry": "2024-03-21T12:00:00.000Z"
    }
}

### Get data source credentials
# @name getCredentials
GET {{baseUrl}}/user-data-sources/{{userId}}/gmail
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### EXTERNAL API INTEGRATION
### ==========================================

### Get Gmail messages
# @name getGmailMessages
GET {{baseUrl}}/api/gmail/messages?userId={{userId}}&maxResults=10
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Get Plaid accounts
# @name getPlaidAccounts
GET {{baseUrl}}/api/plaid/accounts?userId={{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Create Plaid link token
# @name createPlaidLinkToken
GET {{baseUrl}}/api/plaid/create-link-token?userId={{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### ERROR HANDLING TESTS
### ==========================================

### Test API validation with empty userId (should return 400)
# @name apiValidationError
GET {{baseUrl}}/api/plaid/create-link-token?userId=
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Test missing required field (should return 400)
# @name missingRequiredField
POST {{baseUrl}}/volunteered-data
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "value": {
        "age": 30
    }
}

