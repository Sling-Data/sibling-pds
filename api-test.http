### Variables
@baseUrl = http://localhost:3000
@contentType = application/json
@userId = 67c9dcd230beec3d0e0c19c6

### Test root endpoint
# @name root
GET {{baseUrl}}/
Content-Type: {{contentType}}

### Create a new user
# @name createUser
POST {{baseUrl}}/users
Content-Type: {{contentType}}

{
    "name": "Tom√©",
    "email": "tome.m.dj@gmail.com"
}

### Get user by ID (replace ID with the _id from the createUser response)
# @name getUser
GET {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}

### Test invalid user ID (should return 404)
# @name getUserNotFound
GET {{baseUrl}}/users/123456789012345678901234
Content-Type: {{contentType}}

### Create volunteered data
# @name createVolunteeredData
POST {{baseUrl}}/volunteered-data
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "type": "personal_info",
    "value": {
        "age": 30,
        "occupation": "Software Engineer"
    }
}

### Create behavioral data
# @name createBehavioralData
POST {{baseUrl}}/behavioral-data
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "action": "page_view",
    "context": {
        "page": "/dashboard",
        "timestamp": "2024-03-01T12:00:00Z",
        "device": "desktop"
    }
}

### Create external data
# @name createExternalData
POST {{baseUrl}}/external-data
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "source": "github",
    "data": {
        "repos": 25,
        "followers": 150,
        "languages": ["TypeScript", "Python", "Go"]
    }
}

### Get all user data (includes volunteered, behavioral, and external data)
# @name getUserData
GET {{baseUrl}}/user-data/{{userId}}
Content-Type: {{contentType}}

### Test validation errors

### Test missing fields in volunteered data (should return 400)
# @name createVolunteeredDataError
POST {{baseUrl}}/volunteered-data
Content-Type: {{contentType}}

{
    "userId": "{{userId}}"
}

### Test missing fields in behavioral data (should return 400)
# @name createBehavioralDataError
POST {{baseUrl}}/behavioral-data
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "action": "page_view"
}

### Test missing fields in external data (should return 400)
# @name createExternalDataError
POST {{baseUrl}}/external-data
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "source": "github"
}

### Update user by ID
# @name updateUser
PUT {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}

{
    "name": "Updated User",
    "email": "updated@example.com"
}

### User Data Sources Tests ###

### Store Gmail credentials
# @name storeGmailCredentials
POST {{baseUrl}}/user-data-sources
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "dataSourceType": "gmail",
    "credentials": {
        "accessToken": "ya29.a0AfB_byC...",
        "refreshToken": "1//04u...",
        "expiry": "2024-03-21T12:00:00.000Z"
    }
}

### Store Plaid credentials
# @name storePlaidCredentials
POST {{baseUrl}}/user-data-sources
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "dataSourceType": "plaid",
    "credentials": {
        "accessToken": "access-sandbox-e0d1c838-d760-46ce-808d-08d75ea61bdd",
        "itemId": "KzAJNdml86IraWMqR61BuWAqkVeA9kiVvG9AL",
        "expiry": "2024-03-21T12:00:00.000Z"
    }
}

### Get Gmail credentials
# @name getGmailCredentials
GET {{baseUrl}}/user-data-sources/{{userId}}/gmail

### Get Plaid credentials
# @name getPlaidCredentials
GET {{baseUrl}}/user-data-sources/{{userId}}/plaid

### Test validation errors for user data sources

### Try invalid data source type (should return 400)
# @name invalidDataSourceType
POST {{baseUrl}}/user-data-sources
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "dataSourceType": "invalid",
    "credentials": {
        "accessToken": "test"
    }
}

### Try missing credentials (should return 400)
# @name missingCredentials
POST {{baseUrl}}/user-data-sources
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "dataSourceType": "gmail"
}

### Test Gmail token generation
# @name testGmailToken
POST {{baseUrl}}/test/test-gmail-token
Content-Type: {{contentType}}

{
    "userId": "{{userId}}"
}

### Get Gmail authorization URL
# @name getGmailAuthUrl
GET {{baseUrl}}/test/gmail-auth-url?userId={{userId}}
Content-Type: {{contentType}}

### Get Plaid authorization URL (returns redirect URL)
# @name getPlaidAuthUrl
GET {{baseUrl}}/test/plaid-auth-url?userId={{userId}}
Content-Type: {{contentType}}

### Test Gmail data fetching
# @name gmailFetch
POST {{baseUrl}}/test/test-gmail-fetch
Content-Type: {{contentType}}

{
    "userId": "{{userId}}"
}

### Test Plaid Token Generation
# @name testPlaidToken
POST {{baseUrl}}/test/test-plaid-token
Content-Type: application/json

{
    "userId": "{{userId}}"
}

### Test Plaid data fetching
# @name plaidFetch
POST {{baseUrl}}/test/test-plaid-fetch
Content-Type: {{contentType}}

{
    "userId": "{{userId}}"
}

###