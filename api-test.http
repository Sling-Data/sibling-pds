### Variables
@baseUrl = http://localhost:3000
@contentType = application/json
@userId = 67c9dcd230beec3d0e0c19c6
@jwtToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2M5ZGNkMjMwYmVlYzNkMGUwYzE5YzYiLCJpYXQiOjE3NDE5NjIzNzMsImV4cCI6MTc0MTk2NTk3M30.fnl_Qy5MFY_Cgx_vCwQX6SOYlF4xavuqGoNC5n8yuzk
@refreshToken = fda8b33dce40f3d9ca314af675d7e3cb861a9777bd1ec0ab6b02e95c9fe3ee73b2221b8cbec3ce7b

### ==========================================
### BASIC API TESTS
### ==========================================

### Test root endpoint
# @name root
GET {{baseUrl}}/
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### USER MANAGEMENT
### ==========================================

### Create a new user
# @name createUser
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "name": "Tomé",
    "email": "tome.m.dj@gmail.com",
    "password": "securePassword123"
}

### Get user by ID
# @name getUser
GET {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Update user by ID
# @name updateUser
PUT {{baseUrl}}/users/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "name": "Tomé",
    "email": "tome.m.dj@gmail.com",
    "password": "securePassword123"
}

### Test invalid user ID (should return 404)
# @name getUserNotFound
GET {{baseUrl}}/users/123456789012345678901234
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### AUTHENTICATION
### ==========================================

### Sign up a new user (unprotected route - no token needed)
# @name signup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
    "name": "New Test User",
    "email": "newuser04@example.com",
    "password": "securePassword123"
}

### Login to get JWT token (unprotected route - no token needed)
# @name login
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "password": "securePassword123"
}

### Refresh access token using refresh token
# @name refreshJWTToken
POST {{baseUrl}}/auth/refresh-token
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "refreshToken": "{{refreshToken}}"
}

### Access protected route with JWT
# @name protectedRoute
GET {{baseUrl}}/auth/protected
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Test protected route without token (should return 401)
# @name protectedRouteUnauthorized
GET {{baseUrl}}/auth/protected
Content-Type: {{contentType}}

### ==========================================
### USER DATA MANAGEMENT
### ==========================================

### Create volunteered data
# @name createVolunteeredData
POST {{baseUrl}}/volunteered-data
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "type": "personal_info",
    "value": {
        "age": 30,
        "occupation": "Software Engineer"
    }
}

### Create behavioral data
# @name createBehavioralData
POST {{baseUrl}}/behavioral-data
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "action": "page_view",
    "context": {
        "page": "/dashboard",
        "timestamp": "2024-03-01T12:00:00Z",
        "device": "desktop"
    }
}

### Create external data
# @name createExternalData
POST {{baseUrl}}/external-data
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "source": "github",
    "data": {
        "repos": 25,
        "followers": 150,
        "languages": ["TypeScript", "Python", "Go"]
    }
}

### Get all user data (includes volunteered, behavioral, and external data)
# @name getUserData
GET {{baseUrl}}/user-data/{{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### DATA SOURCE INTEGRATION
### ==========================================

### Store Gmail credentials
# @name storeGmailCredentials
POST {{baseUrl}}/user-data-sources
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "dataSourceType": "gmail",
    "credentials": {
        "accessToken": "ya29.a0AeXRPp5Ee53nSXTO1mPq547yx23b-aBaQA_MGkDfNW61BL3yMGPlydH_Ragt3G0Im0YMLkXp0VnftU-vTEkAOKxMo3WrFu0sc2gPE5TS3t3QdSTEAipb5zTezrM-VSeywnHoat1wV-WrTSWT9kurcyBuurwhHifDoGhAgiMrzQaCgYKARcSARASFQHGX2Mi-cLABfhkCYvFxhC8RSgXkQ0177",
        "refreshToken": "1//03QcFvnaB15vDCgYIARAAGAMSNwF-L9IrN7ZPZfBoswFLVOq0GWbgnolY2QScJ-Zx2Wux42J9wWvDGmo_7xwQeIJUIH5RyxSkyNQ",
        "expiry": "2024-03-21T12:00:00.000Z"
    }
}

### Store Plaid credentials
# @name storePlaidCredentials
POST {{baseUrl}}/user-data-sources
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

{
    "userId": "{{userId}}",
    "dataSourceType": "plaid",
    "credentials": {
        "accessToken": "access-sandbox-e0d1c838-d760-46ce-808d-08d75ea61bdd",
        "itemId": "KzAJNdml86IraWMqR61BuWAqkVeA9kiVvG9AL",
        "expiry": "2024-03-21T12:00:00.000Z"
    }
}

### Get Gmail credentials
# @name getGmailCredentials
GET {{baseUrl}}/user-data-sources/{{userId}}/gmail
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Get Plaid credentials
# @name getPlaidCredentials
GET {{baseUrl}}/user-data-sources/{{userId}}/plaid
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### GMAIL INTEGRATION TESTS
### ==========================================

### Get Gmail authorization URL
# @name getGmailAuthUrl
GET {{baseUrl}}/test/gmail-auth-url?userId={{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### PLAID INTEGRATION TESTS
### ==========================================

### Get Plaid link token
# @name getPlaidLinkToken
GET {{baseUrl}}/test/plaid-link-token?userId={{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### API ROUTES
### ==========================================

### Get Gmail messages
# @name getGmailMessages
GET {{baseUrl}}/api/gmail/messages?userId={{userId}}&maxResults=10
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Get Gmail message by ID
# @name getGmailMessageById
GET {{baseUrl}}/api/gmail/message/18e2c1e7c0d9e1a0?userId={{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Get Plaid accounts
# @name getPlaidAccounts
GET {{baseUrl}}/api/plaid/accounts?userId={{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Get Plaid transactions
# @name getPlaidTransactions
GET {{baseUrl}}/api/plaid/transactions?userId={{userId}}&startDate=2024-01-01&endDate=2024-03-01
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Create Plaid link token
# @name createPlaidLinkToken
GET {{baseUrl}}/api/plaid/create-link-token?userId={{userId}}
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### Test API validation with empty userId (should return 400)
# @name apiValidationError
GET {{baseUrl}}/api/plaid/create-link-token?userId=
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### ==========================================
### AUTH ROUTES FOR MANUAL TESTING
### ==========================================

### 1. Test login to get token
# @name testLogin
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
    "userId": "{{userId}}",
    "password": "securePassword123"
}

### 2. Test accessing Gmail auth with token
# @name testGmailWithToken
GET {{baseUrl}}/auth/gmail
Content-Type: {{contentType}}
Authorization: Bearer {{jwtToken}}

### 3. Test accessing Gmail auth without token (should return 401)
# @name testGmailWithoutToken
GET {{baseUrl}}/auth/gmail
Content-Type: {{contentType}}

